#coding:utf-8
#注意：代码在python3.4中调试通过，其他版本可能有细微差异
#作者:张奔
#日期:2015.6.1

#插入排序
def insert_sort(mylist):
    if len(mylist)==0:
        return mylist
    for i in range(1,len(mylist)):
        j=i
        temp=mylist[i]
        while j>0 and mylist[j-1] > temp:
            mylist[j] = mylist[j-1]
            j -=1
        mylist[j]=temp
        
#shell排序
def shell_sort(mylist):
    gap=len(mylist)//2
    while gap>0:
        for i in range(gap,len(mylist)):
            j=i
            temp=mylist[i]
            while j>=gap and temp < mylist[j-gap]:
                mylist[j]=mylist[j-gap]            
                j-=gap
            mylist[j]=temp
        gap//=2


#快速排序
def quick_sort(mylist):
    if(len(mylist) < 2):
        return
    left = [x for x in mylist[1:] if x < mylist[0]]
    right = [x for x in mylist[1:] if x >= mylist[0]]
    quick_sort(left)
    quick_sort(right)
    mylist[:] = left + [mylist[0]] + right
    
#冒泡排序
def buble_sort(mylist):
    if(len(mylist) < 2):
        return
    for i in range(0,len(mylist)):
        flag=0
        j=len(mylist)-1
        while j>i:
            if mylist[j]<mylist[j-1]:
                mylist[j],mylist[j-1]=mylist[j-1],mylist[j]
                flag=1
            j-=1
        if flag==0:
            return

#归并排序

def merge(left,right):  
    result=[]  
    i,j=0,0  
    while i<len(left) and j<len(right):  
        if left[i]<=right[j]:  
            result.append(left[i])  
            i+=1  
        else:  
            result.append(right[j])  
            j+=1  
    result+=left[i:]  
    result+=right[j:]  
    return result

def merge_sort(mylist):  
    if len(mylist)<2:
        return mylist      
    mid=len(mylist)//2  
    left=merge_sort(mylist[:mid])  
    right=merge_sort(mylist[mid:])  
    return merge(left,right)  
  
